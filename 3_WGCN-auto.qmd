---
title: "3_WGCN-auto"
format: html
editor: visual
---

# WGCN construction

Resume session

```{r}
session_name <- "PROVA"
```

with blockwise method

```{r}
source("src/3_env_setup.R")
load(paste0(session_name,"/out/1_prepared_data.RData"))
load(paste0(session_name,"/out/2_pt.Rdata"))
source(paste0(session_name,"/in/", session_name,"_parameters.R"))
```

```{r}
#find gene co-expression modules in WGCNA####
net <- blockwiseModules(data$exprData,
                          maxBlockSize = MaxBS, # What size chunks (how many genes) the calculations should be run in
                          corType = corType,
                          minModuleSize = minModSize, 
                          deepSplit = deepSplit,
                          networkType = network_type,
                          TOMType = TOMtype, # topological overlap matrix
                          power = power_threshold, # soft threshold for network construction (see scale indipendence plot)
                          mergeCutHeight = mergeCutHeight,
                          numericLabels = FALSE, # Let's use numbers instead of colors for module labels
                          saveTOMs = TRUE,
                          saveTOMFileBase = paste0(session_name, "/out/TOMfiles/",session_name,"_TOM-bw"),
                          randomSeed = rs, # there's some randomness associated with this calculation so we should set a seed
)
```

## Re-assign modules by k-means clustering

"k-means method, applied as an adjunct to standard WGCNA, results in better network partitions. These improved partitions enable more fruitful downstream analyses, as gene modules are more biologically meaningful."(<https://doi.org/10.1186/s12918-017-0420-6>)

```{r}
#for compatibility reasons with CoExpNets, change name from net$colors to net$moduleColors
names(net)[names(net) == "colors"] <- "moduleColors"

#apply k-means clustering
net_km <- CoExpNets::applyKMeans( net.file = net,
                                    expr.data = data$exprData
)

#restore original name and change also net_km
names(net)[names(net) == "moduleColors"] <- "colors"
names(net_km)[names(net_km) == "moduleColors"] <- "colors"
```

## Save network and module tables

```{r}
save(net, net_km, file = paste0(session_name, "/out/networks.Rdata"))
```

```{r}
#export table of genes with correspondent module
#get genes in the modules
gene_module_key <- tibble::enframe(net$colors, name = "gene", value = "module")

gene_module_key_km <- tibble::enframe(net_km$colors, name = "gene", value = "module")
#save the tables and plots for future use
readr::write_tsv(gene_module_key,
                 file = file.path(session_name, "out", "wgcna_gene_to_module.tsv")
)

readr::write_tsv(gene_module_key_km,
                 file = file.path(session_name, "out", "wgcna_km_gene_to_module.tsv")
)
```

## Network plots

You can also use 3.1_WGCNplots for this part

```{r}
# Plot the dendrogram for each block and the module colors underneath

for (i in 1:length(net$blockGenes)){
  plotDendroAndColors(
    net$dendrograms[[i]],
    net$colors[net$blockGenes[[i]]],
    "HC Modules",
    dendroLabels = FALSE,
    hang = 0.03,
    addGuide = TRUE,
    guideHang = 0.05)
}

for (i in 1:length(net$blockGenes)){
  pdf(file = paste0(session_name, "/plots/HC_modules_dendro.", i, ".pdf"), 
  width = 8,          # Width in inches
  height = 6,         # Height in inches
  bg = "white")
  plotDendroAndColors(
    net$dendrograms[[i]],
    net$colors[net$blockGenes[[i]]],
    "HC Modules",
    dendroLabels = FALSE,
    hang = 0.03,
    addGuide = TRUE,
    guideHang = 0.05)
  dev.off()
}
```

Plot genes number in the different modules

```{r}
GenModPlot <- plot_genes_in_modules(net, title = "Number of Genes in Modules by HC")
GenModPlot_km <- plot_genes_in_modules(net_km, title = "Number of Genes in Modules by k-means")
print(GenModPlot)
print(GenModPlot_km)

pdf(file = paste0(session_name, "/plots/genes_in_modules_HC.pdf"), 
  width = 8,          # Width in inches
  height = 6,         # Height in inches
  bg = "white")
print(GenModPlot)
dev.off()

pdf(file = paste0(session_name, "/plots/genes_in_modules_KM.pdf"), 
  width = 8,          # Width in inches
  height = 6,         # Height in inches
  bg = "white")
print(GenModPlot_km)
dev.off()
```

plots dendrogram and eigengene representations of (consensus) eigengenes networks.

```{r}
pdf(file = paste0(session_name, "/plots/modules-HC_EigengenesNet.pdf"), 
  width = 8,          # Width in inches
  height = 6,         # Height in inches
  bg = "white")

plotEigengeneNetworks(orderMEs(net$MEs),
                      setLabels = "HC modules",
                      marDendro=c(0,4,1,2), 
                      marHeatmap=c(3,4,1,2),
                      cex.lab=0.8,
                      xLabelsAngle=90,
                      plotPreservation = "standard")
dev.off()

pdf(file = paste0(session_name, "/plots/modules-KM_EigengenesNet.pdf"), 
  width = 8,          # Width in inches
  height = 6,         # Height in inches
  bg = "white")
plotEigengeneNetworks(orderMEs(net_km$MEs),
                      "KM modules",
                      marDendro=c(0,4,1,2), 
                      marHeatmap=c(3,4,1,2),
                      cex.lab=0.8,
                      xLabelsAngle=90,
                      plotPreservation = "standard")
dev.off()
```

```{r}
rm(list = ls())
```
